{
	"name": "Dataflow6",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "TestTrainData2",
						"type": "DatasetReference"
					},
					"name": "RESTtrainSource1"
				},
				{
					"dataset": {
						"referenceName": "TestTrainData2",
						"type": "DatasetReference"
					},
					"name": "RESTtrainSource2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSynapseAnalyticsTable2",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "flatten1"
				},
				{
					"name": "flatten2"
				},
				{
					"name": "select1"
				},
				{
					"name": "select2"
				},
				{
					"name": "union1"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          body as (cancelled as boolean, commuterLineID as string, departureDate as date, operatorShortCode as string, operatorUICCode as short, runningCurrently as boolean, timeTableRows as (cancelled as boolean, causes as string[], commercialStop as boolean, commercialTrack as short, countryCode as string, scheduledTime as string, stationShortCode as string, stationUICCode as short, trainStopping as boolean, type as string)[], timetableAcceptanceDate as string, timetableType as string, trainCategory as string, trainNumber as short, trainType as string, version as long),",
				"          headers as [string,string]",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     httpMethod: 'GET',",
				"     timeout: 30,",
				"     paginationRules: ['supportRFC5988' -> 'true'],",
				"     responseFormat: ['type' -> 'json', 'documentForm' -> 'arrayOfDocuments']) ~> RESTtrainSource1",
				"source(output(",
				"          body as (cancelled as boolean, commuterLineID as string, departureDate as date, operatorShortCode as string, operatorUICCode as short, runningCurrently as boolean, timeTableRows as (actualTime as string, cancelled as boolean, causes as string[], commercialStop as boolean, commercialTrack as short, countryCode as string, differenceInMinutes as short, estimateSource as string, liveEstimateTime as string, scheduledTime as string, stationShortCode as string, stationUICCode as short, stopSector as string, trainReady as (accepted as boolean, source as string, timestamp as string), trainStopping as boolean, type as string)[], timetableAcceptanceDate as string, timetableType as string, trainCategory as string, trainNumber as short, trainType as string, version as long),",
				"          headers as [string,string]",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     httpMethod: 'GET',",
				"     timeout: 30,",
				"     requestInterval: 0,",
				"     paginationRules: ['supportRFC5988' -> 'true'],",
				"     responseFormat: ['type' -> 'json', 'documentForm' -> 'documentPerLine']) ~> RESTtrainSource2",
				"derivedColumn1 foldDown(unroll(body.timeTableRows),",
				"     mapColumn(",
				"          body,",
				"          headers",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten1",
				"RESTtrainSource2 foldDown(unroll(body.timeTableRows),",
				"     mapColumn(",
				"          body,",
				"          headers",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten2",
				"flatten1 select(mapColumn(",
				"          body",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"flatten2 select(mapColumn(",
				"          body",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select1, select2 union(byName: true)~> union1",
				"RESTtrainSource1 derive(trains = toArray(body),",
				"          column2 = ERROR_FUNCTION('')) ~> derivedColumn1",
				"union1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     staged: true,",
				"     allowCopyCommand: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
			]
		}
	}
}